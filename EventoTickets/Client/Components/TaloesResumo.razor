@using EventoTickets.Shared
@using MudBlazor;

<h4>@(Avulsos ? "Vendas avulsas" : "Talões restantes")</h4>
@if (Taloes?.Count > 0)
{
    @foreach (var talao in Taloes)
    {
        <MudPaper Elevation="1" Style=@($"background-color:{((@talao.NumeroInicial % 2 == 0) ? Colors.Blue.Lighten4 : Colors.Blue.Lighten5)};margin:5px") Outlined="true">
            <MudGrid>
                <MudItem xs="3" md="3">
                    @if (!string.IsNullOrWhiteSpace(@talao.ResponsavelTalao))
                    {
                        <MudText Align="Align.Center"><strong>@talao.ResponsavelTalao</strong></MudText>
                    }
                    
                    <MudText Align="Align.Center">Talão: @talao.NumeroTalao</MudText>
                </MudItem>
                <MudItem xs="9" md="9">
                    <MudPaper Class="d-flex flex-wrap px-2" Elevation="0"
                        Style=@($"background-color:{((@talao.NumeroInicial % 2 == 0) ? Colors.Blue.Lighten4 : Colors.Blue.Lighten5)}")>
                        @foreach (var item in @talao.Tickets)
                        {
                            <MudChip T="int" Class="pa-1 ma-1" Style="@($"background:{Colors.Blue.Default};color:#fff;width:75px; text-align:center;")">
                                @item.NumeroTicket
                            </MudChip>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
}
else
{
    <MudAlert Severity="Severity.Info">@(Avulsos ? "Não foram efetuadas vendas avulsas" : "Todos talões já foram entregues")</MudAlert>
}

@code {
    [Parameter]
    public List<Ticket>? Tickets { get; set; } = null;
    
    [Parameter] 
    public bool Avulsos { get; set; }

    private List<Talao> Taloes
    {
        get
        {
            var taloes = new List<Talao>();
            var tickets = Tickets
                .Where(t => (!Avulsos && t.Status == StatusTicket.EmAberto &&
                             !string.IsNullOrWhiteSpace(t.Talao?.ResponsavelTalao)) ||
                            (Avulsos && t.Status == StatusTicket.Entregue && string.IsNullOrWhiteSpace(t.Talao?.ResponsavelTalao))).ToList();
            string? responsavel = null;
            var talao = new Talao();
            var i = 0;

            if (Tickets == null) 
                return taloes;
            
            foreach (var ticket in tickets.OrderBy(x => x.Talao.ResponsavelTalao).ThenBy(n => n.NumeroTicket).ToList())
            {
                if (responsavel != $"{ticket.Talao.NumeroTalao}|{ticket.Talao.ResponsavelTalao}")
                {
                    responsavel = $"{ticket.Talao.NumeroTalao}|{ticket.Talao.ResponsavelTalao}";
                    talao = new Talao
                    {
                        NumeroTalao = ticket.Talao.NumeroTalao,
                        ResponsavelTalao = ticket.Talao.ResponsavelTalao,
                        NumeroInicial = i++
                    };

                    taloes.Add(talao);
                }

                talao.Tickets ??= new List<Ticket>();
                talao.Tickets.Add(ticket);
            }

            return taloes;
        }
    }
}
