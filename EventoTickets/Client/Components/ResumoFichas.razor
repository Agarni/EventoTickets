@using EventoTickets.Shared
@using MudBlazor

<MudPaper Outlined="true" Square="true">
    <MudList DisablePadding="true" T="string">
        @if (StatusConexao != StatusConexao.Conectado)
        {
            <MudListItem>
                <MudChip Color="@(StatusConexao == StatusConexao.Reconectando ? Color.Warning : Color.Error)" Class="d-flex align-center">
                    @if (StatusConexao == StatusConexao.Desconectado)
                    {
                        <MudText Typo="Typo.subtitle1">Desconectado</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.subtitle1">Reconectando</MudText>
                    }
                </MudChip>
            </MudListItem>
        }
        <MudListItem>
            <MudPaper Class="mud-width-full mud-theme-primary" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Distribuídas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@_totalDistribuidas</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full" Style="@($"background:{Colors.Blue.Default};color:#fff")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Restantes</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@TotalRestantes</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full" Style="@($"background:{Colors.Gray.Lighten3};color:{Colors.Gray.Darken2}")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Entregues</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@_totalEntregues</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full" Style="@($"background:{Colors.Green.Default};color:#fff")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Avulsas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@_totalAvulsas</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full mud-theme-secondary" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Devolvidas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@_totalDevolvidas</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full" Style="@($"background:{Colors.Indigo.Darken4};color:#fff")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Total de fichas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@_totalFichas</MudText>
        </MudListItem>
    </MudList>
</MudPaper>

@code {
    private int _totalFichas;
    private int _totalDistribuidas;
    private int _totalAvulsas;
    private int _totalEntregues;
    private int _totalDevolvidas;
    private int TotalRestantes => _totalDistribuidas - _totalEntregues - _totalDevolvidas + _totalAvulsas;

    [Parameter]
    public EventCallback<List<Ticket>> OnAtualizarTickets { get; set; }

    private List<Ticket> _listaTickets;
    [Parameter]
    public List<Ticket> ListaTickets
    {
        get => _listaTickets;
        set
        {
            _listaTickets = value;
            Task.Run(async() => await CalcularTotais());
        }
    }

    private StatusConexao _statusConexao = StatusConexao.Desconectado;
    public StatusConexao StatusConexao
    {
        get => _statusConexao;
        set
        {
            if (_statusConexao == value) return;
            
            _statusConexao = value;
            StateHasChanged();
        }
    }

    private async Task CalcularTotais()
    {
        _totalFichas = ListaTickets?.Count ?? 0;
        _totalDistribuidas = ListaTickets?.Count(x => !string.IsNullOrWhiteSpace(x.Talao?.ResponsavelTalao)) ?? 0;
        _totalAvulsas = ListaTickets?.Count(x => x.Status == StatusTicket.Avulso) ?? 0;
        _totalEntregues = (ListaTickets?.Count(x => x.Status is StatusTicket.Entregue) ?? 0) + _totalAvulsas;
        _totalDevolvidas = ListaTickets?.Count(x => x.Status == StatusTicket.Devolvido) ?? 0;

        StateHasChanged();

        await OnAtualizarTickets.InvokeAsync(_listaTickets);
    }
}
