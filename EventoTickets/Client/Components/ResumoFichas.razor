@using EventoTickets.Shared
@using MudBlazor

<MudPaper Outlined="true" Square="true" Style="margin-right:20px">
    <MudList DisablePadding="true">
        <MudListItem>
            <MudPaper Class="mud-width-full mud-theme-primary" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Distribuídas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@TotalDistribuidas</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full" Style="@($"background:{Colors.Blue.Default};color:#fff")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Restantes</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@TotalRestantes</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full mud-theme-default" Style="@($"background:{Colors.Green.Default};color:#fff")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Confirmadas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@TotalConfirmadas</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full" Style="@($"background:{Colors.Grey.Lighten3};color:{Colors.Grey.Darken2}")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Entregues</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@TotalEntregues</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full mud-theme-secondary" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Devolvidas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@TotalDevolvidas</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full" Style="@($"background:{Colors.Green.Default};color:#fff")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Avulsas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@TotalAvulsas</MudText>
        </MudListItem>
        <MudListItem>
            <MudPaper Class="mud-width-full" Style="@($"background:{Colors.Indigo.Darken4};color:#fff")" Elevation="0" Outlined="true">
                <MudText Align="Align.Center" Typo="Typo.subtitle1">Total de fichas</MudText>
            </MudPaper>
            <MudText Align="Align.Center" Typo="Typo.h4">@TotalFichas</MudText>
        </MudListItem>
    </MudList>
</MudPaper>

@code {
    public int TotalFichas { get; set; }
    public int TotalDistribuidas { get; set; }
    public int TotalConfirmadas { get; set; }
    public int TotalAvulsas { get; set; }
    public int TotalEntregues { get; set; }
    public int TotalDevolvidas { get; set; }
    public int TotalRestantes => TotalDistribuidas - TotalConfirmadas;

    [Parameter]
    public EventCallback<List<Ticket>> OnAtualizarTickets { get; set; }

    private List<Ticket> _listaTickets;
    [Parameter]
    public List<Ticket> ListaTickets
    {
        get => _listaTickets;
        set
        {
            _listaTickets = value;
            Task.Run(async() => await CalcularTotais());
        }
    }

    private async Task CalcularTotais()
    {
        TotalFichas = ListaTickets?.Count ?? 0;
        TotalDistribuidas = ListaTickets?.Count(x => !string.IsNullOrWhiteSpace(x.Talao?.ResponsavelTalao)) ?? 0;
        TotalConfirmadas = ListaTickets?.Count(x => (new[] { StatusTicket.Devolvido,
            StatusTicket.Entregue, StatusTicket.Avulso }).Contains(x.Status)) ?? 0;
        TotalAvulsas = ListaTickets?.Count(x => x.Status == StatusTicket.Avulso) ?? 0;
        TotalEntregues = ListaTickets?.Count(x => x.Status == StatusTicket.Entregue) ?? 0;
        TotalDevolvidas = ListaTickets?.Count(x => x.Status == StatusTicket.Devolvido) ?? 0;

        StateHasChanged();

        await OnAtualizarTickets.InvokeAsync(_listaTickets);
    }
}
