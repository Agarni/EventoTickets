@using EventoTickets.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazor
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudDrawer @bind-Open="@_drawerOpen" Style="top:-5px" Width="250px">
        <NavMenu />
    </MudDrawer>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        @evento.NomeEvento
    </MudAppBar>

    @if (Installable)
    {
        <div class="row justify-content-center">
            <div class="install-prompt col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3">
                <span>Install app?</span>
                <button class="installButton btn btn-primary" @onclick="@(() => InstallClicked())">Sim</button>
                <button class="cancelButton btn btn-danger" @onclick="@(()=>Installable=false)">Não</button>
            </div>
        </div>
    }

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    Evento evento = new Evento { NomeEvento = "Eventos" };

    private HubConnection hubConnection;

    static bool Installable = false;
    static Action OnInstallable;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/eventohub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallCarregarEventoPadrao();
        });

        await hubConnection.StartAsync();
        await CarregarInformacoes();
    }

    private void CallCarregarEventoPadrao()
    {
        Task.Run(async () =>
        {
            await CarregarInformacoes();
        });
    }

    private async Task CarregarInformacoes()
    {
        evento = await Http.GetFromJsonAsync<Evento>("api/eventos/GetEventoPadrao");

        if (evento == null)
        {
            evento = new Evento { NomeEvento = "Eventos" };
        }

        StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnInitialized()
    {
        OnInstallable = () => InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public static Task PWAInstallable()
    {
        Installable = true;
        OnInstallable.Invoke();
        return Task.CompletedTask;
    }

    ValueTask InstallClicked()
    {
        Installable = false;
        return JSRuntime.InvokeVoidAsync("BlazorPWA.installPWA");
    }
}